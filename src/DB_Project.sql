CREATE TABLE CityProject (
    id NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name varchar(255) NOT NULL,
    Latitude NUMBER CONSTRAINT Latitude
        CHECK ((Latitude >= -90) AND (Latitude <= 90)) ,
    Longitude NUMBER CONSTRAINT Longitude
        CHECK ((Longitude >= -180) AND (Longitude <= 180))
);

CREATE TABLE Group1 (
    id NUMBER(10),
    name varchar(255),
    Latitude NUMBER,
    Longitude NUMBER
);

CREATE TABLE Group2 (
    id NUMBER(10),
    name varchar(255),
    Latitude NUMBER,
    Longitude NUMBER
);

execute GroupingProcedure();
SET SERVEROUTPUT ON
Select * From Group1;
Select * From Group2;

INSERT INTO CityProject VALUES (null, 'Athens', 37.97, 23.72);
INSERT INTO CityProject VALUES (null, 'London', 51.50, -0.11);
INSERT INTO CityProject VALUES (null, 'Lisbon', 51.50, -0.11);
INSERT INTO CityProject VALUES (null, 'Chicago', 41.878114, -87.629798);
INSERT INTO CityProject VALUES (null, 'Boston', 41.88, -71.05);
INSERT INTO CityProject VALUES (null, 'Edinburgh', 55.953252, -3.188267);
INSERT INTO CityProject VALUES (null, 'Eindhoven', 51.441642, 5.469722);
INSERT INTO CityProject VALUES (null, 'Bielefeld', 52.030228, 8.532471);
INSERT INTO CityProject VALUES (null, 'Paris', 48.856614, 2.352222);
INSERT INTO CityProject VALUES (null, 'Brussel', 50.850346, 4.351721);
INSERT INTO CityProject VALUES (null, 'Bern', 46.947974, 7.447447);
INSERT INTO CityProject VALUES (null, 'Berlin', 52.520007, 13.404954);
INSERT INTO CityProject VALUES (null, 'Stockholm', 59.329323, 18.068581);
INSERT INTO CityProject VALUES (null, 'Copenhagen', 55.676097, 12.568337);
INSERT INTO CityProject VALUES (null, 'Rome', 41.902783, 12.496366);

UPDATE CityProject SET name = 'Washington DC', Latitude=38.907192, Longitude=-77.036871 where id ='3';
UPDATE CityProject SET name = 'Samos', Latitude = 37.754786, Longitude = 26.977770 where id = '3';

Select * from CityProject;


/*CREATE OR REPLACE TRIGGER City_ID_on_insert
  BEFORE INSERT ON CityProject
  FOR EACH ROW
BEGIN
  SELECT City_sequence.nextval
  INTO :new.id
  FROM dual;
END;*/



    create or replace function RandomNumber1_15
    return number 
    is 
    a number ; 
    begin
    select round(dbms_random.value(1,15)) rnum
    into a 
    from dual;
    return a;
    end;
	
	select RandomNumber1_15 from dual; 
    

SET SERVEROUTPUT ON
DECLARE 
 c1 NUMBER; -- random gia to ID tou 1ou kedrou
 c2 NUMBER; -- random gia to ID tou 2ou kedrou
 center1 CITYPROJECT%ROWTYPE; -- 1o Kedro
 center2 CITYPROJECT%ROWTYPE; -- 2o Kedro
 temp CITYPROJECT%ROWTYPE; -- temp city gia na vriskw se poia omada anoikei k na tin kanw add stin List.
 distance1 NUMBER; --apostasi metaksi Lat Long gia center 1.
 distance2 NUMBER; --apostasi metaksi Lat Long gia center 2.
 newLat NUMBER; -- metavliti gia to neo Latitude.
 newLon NUMBER; -- metavliti gia to neo Longitude.
 TYPE teamList IS TABLE OF CITYPROJECT%ROWTYPE;
 omada1 teamList := teamList ();
 omada2 teamList := teamList ();
 i NUMBER := 1;
 BEGIN 
    -- Generate 2 randoms:
    c1 := RandomNumber1_15(); 
    c2 := RandomNumber1_15(); 
    -- An ta 2 randoms einai idia vriskw diaforetiko 2o:
    WHILE c2 = c1
    LOOP
       c2 := RandomNumber1_15(); 
    END LOOP;
    --Typwnw ta randoms. Ta randoms auta einai ta ID twn polewn pou tha einai ta Kedra.
    dbms_output.put_line('Random 1: ' || c1); 
    dbms_output.put_line('Random 2: ' || c2);
    
    --Vriskw poies polois einai ta random Kedra:
    Select * into center1 from CityProject where id = c1;
    Select * into center2 from CityProject where id = c2;
    dbms_output.put_line('1o Kedro: '|| center1.name);
    dbms_output.put_line('2o Kedro: '|| center2.name);
    
    --Add ta Kedra stis listes:
    omada1.EXTEND;
    omada1 (omada1.LAST) := center1;
    omada2.EXTEND;
    omada2 (omada2.LAST) := center2;

    -- Diaxorismos me vasi to random kedro se 2 listes:
    WHILE i <= 15
    LOOP
        Select * into temp from CityProject where id = i;
        IF temp.id != center1.id AND temp.id != center2.id THEN
            distance1 := SQRT(POWER((temp.Latitude - center1.Latitude), 2) + POWER((temp.Longitude - center1.Longitude), 2));
            distance2 := SQRT(POWER((temp.Latitude - center2.Latitude), 2) + POWER((temp.Longitude - center2.Longitude), 2));
            --dbms_output.put_line('distance1: '|| distance1);
            --dbms_output.put_line('distance2: '|| distance2);
            --dbms_output.put_line('i: '|| i);
            IF distance1 < distance2 THEN
                omada1.EXTEND;
                omada1 (omada1.LAST) := temp;
            ELSIF distance1 > distance2 THEN
                omada2.EXTEND;
                omada2 (omada2.LAST) := temp;
            END IF;
            
            -- Evresi neou kedrou gia omada 1:
            newLat := 0;
            newLon := 0;
            FOR l_row IN 1 .. omada1.COUNT
                LOOP
                    newLat := newLat + omada1 (l_row).Latitude;
                    newLon := newLon + omada1 (l_row).Longitude;
                END LOOP;
            newLat := newLat / omada1.count;
            newLon := newLon / omada1.count;
            BEGIN
                Select * into center1 from CityProject where Latitude = newLat and Longitude = newLon;
                DBMS_OUTPUT.put_line ('Neo Kedro tis omadas 1: ' || center1.name);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN null;
            END;
            
            -- Evresi neou kedrou gia omada 2:
            newLat := 0;
            newLon := 0;
            FOR l_row IN 1 .. omada2.COUNT
                LOOP
                    newLat := newLat + omada2 (l_row).Latitude;
                    newLon := newLon + omada2 (l_row).Longitude;
                END LOOP;
            newLat := newLat / omada2.count;
            newLon := newLon / omada2.count;
            BEGIN
                Select * into center2 from CityProject where Latitude = newLat and Longitude = newLon;
                DBMS_OUTPUT.put_line ('Neo Kedro tis omadas 2: ' || center2.name);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN null;
            END;
        END IF;
        i:= i + 1;
    END LOOP;

    -- Print tis Lists
    dbms_output.put_line('List 1: ');
    FOR l_row IN 1 .. omada1.COUNT
        LOOP
            DBMS_OUTPUT.put_line (omada1 (l_row).name);
        END LOOP;
    dbms_output.put_line('List 2: ');
    FOR l_row IN 1 .. omada2.COUNT
        LOOP
            DBMS_OUTPUT.put_line (omada2 (l_row).name);
        END LOOP;
 END;
 
 
 --Me procedure:
CREATE OR REPLACE PROCEDURE GroupingProcedure
AS
BEGIN
DECLARE 
 c1 NUMBER; -- random gia to ID tou 1ou kedrou
 c2 NUMBER; -- random gia to ID tou 2ou kedrou
 center1 CITYPROJECT%ROWTYPE; -- 1o Kedro
 center2 CITYPROJECT%ROWTYPE; -- 2o Kedro
 temp CITYPROJECT%ROWTYPE; -- temp city gia na vriskw se poia omada anoikei k na tin kanw add stin List.
 distance1 NUMBER; --apostasi metaksi Lat Long gia center 1.
 distance2 NUMBER; --apostasi metaksi Lat Long gia center 2.
 newLat NUMBER; -- metavliti gia to neo Latitude.
 newLon NUMBER; -- metavliti gia to neo Longitude.
 TYPE teamList IS TABLE OF CITYPROJECT%ROWTYPE;
 omada1 teamList := teamList ();
 omada2 teamList := teamList ();
 i NUMBER := 1;
 BEGIN 
    -- Generate 2 randoms:
    c1 := RandomNumber1_15(); 
    c2 := RandomNumber1_15(); 
    -- An ta 2 randoms einai idia vriskw diaforetiko 2o:
    WHILE c2 = c1
    LOOP
       c2 := RandomNumber1_15(); 
    END LOOP;
    --Typwnw ta randoms. Ta randoms auta einai ta ID twn polewn pou tha einai ta Kedra.
    dbms_output.put_line('Random 1: ' || c1); 
    dbms_output.put_line('Random 2: ' || c2);
    
    --Vriskw poies polois einai ta random Kedra:
    Select * into center1 from CityProject where id = c1;
    Select * into center2 from CityProject where id = c2;
    dbms_output.put_line('1o Kedro: '|| center1.name);
    dbms_output.put_line('2o Kedro: '|| center2.name);
    
    --Add ta Kedra stis listes:
    omada1.EXTEND;
    omada1 (omada1.LAST) := center1;
    omada2.EXTEND;
    omada2 (omada2.LAST) := center2;

    -- Diaxorismos me vasi to random kedro se 2 listes:
    WHILE i <= 15
    LOOP
        Select * into temp from CityProject where id = i;
        IF temp.id != center1.id AND temp.id != center2.id THEN
            distance1 := SQRT(POWER((temp.Latitude - center1.Latitude), 2) + POWER((temp.Longitude - center1.Longitude), 2));
            distance2 := SQRT(POWER((temp.Latitude - center2.Latitude), 2) + POWER((temp.Longitude - center2.Longitude), 2));
            --dbms_output.put_line('distance1: '|| distance1);
            --dbms_output.put_line('distance2: '|| distance2);
            --dbms_output.put_line('i: '|| i);
            IF distance1 < distance2 THEN
                omada1.EXTEND;
                omada1 (omada1.LAST) := temp;
            ELSIF distance1 > distance2 THEN
                omada2.EXTEND;
                omada2 (omada2.LAST) := temp;
            END IF;
            
            -- Evresi neou kedrou gia omada 1:
            newLat := 0;
            newLon := 0;
            FOR l_row IN 1 .. omada1.COUNT
                LOOP
                    newLat := newLat + omada1 (l_row).Latitude;
                    newLon := newLon + omada1 (l_row).Longitude;
                END LOOP;
            newLat := newLat / omada1.count;
            newLon := newLon / omada1.count;
            BEGIN
                Select * into center1 from CityProject where Latitude = newLat and Longitude = newLon;
                DBMS_OUTPUT.put_line ('Neo Kedro tis omadas 1: ' || center1.name);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN null;
            END;
            
            -- Evresi neou kedrou gia omada 2:
            newLat := 0;
            newLon := 0;
            FOR l_row IN 1 .. omada2.COUNT
                LOOP
                    newLat := newLat + omada2 (l_row).Latitude;
                    newLon := newLon + omada2 (l_row).Longitude;
                END LOOP;
            newLat := newLat / omada2.count;
            newLon := newLon / omada2.count;
            BEGIN
                Select * into center2 from CityProject where Latitude = newLat and Longitude = newLon;
                DBMS_OUTPUT.put_line ('Neo Kedro tis omadas 2: ' || center2.name);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN null;
            END;
        END IF;
        i:= i + 1;
    END LOOP;

    -- Print tis Lists
    dbms_output.put_line('List 1: ');
    FOR l_row IN 1 .. omada1.COUNT
        LOOP
            DBMS_OUTPUT.put_line (omada1 (l_row).name);
        END LOOP;
    dbms_output.put_line('List 2: ');
    FOR l_row IN 1 .. omada2.COUNT
        LOOP
            DBMS_OUTPUT.put_line (omada2 (l_row).name);
        END LOOP;
        
    --Save se 2 pinakes tis 2 omades:
    DELETE FROM Group1;
    DELETE FROM Group2;
    commit;
     FOR l_row IN 1 .. omada1.COUNT
        LOOP
            INSERT INTO Group1 VALUES (omada1 (l_row).id, omada1 (l_row).name, omada1 (l_row).Latitude,omada1 (l_row).Longitude);
        END LOOP;
     FOR l_row IN 1 .. omada2.COUNT
        LOOP
            INSERT INTO Group2 VALUES (omada2 (l_row).id, omada2 (l_row).name, omada2 (l_row).Latitude,omada2 (l_row).Longitude);
        END LOOP;
 END;
 END GroupingProcedure;